设计模式
  设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案
  这些解决方案是众多软件开发人员经过相当长的一段时间的实验和错误总结出来的
  使用设计模式是为了重用代码,让代码更容易被他人理解,保证代码可靠性

 GOF
  在 1994 年,由 Erich Gamma , Richard Helm , Ralph Johnson 和 John Vlissides 四人合著出版了
  一本名为 Design Patterns - Elements of Reusable Object-Oriented Software(中文译名:设计模式-可复用的面向对象软件元素) 的书
  该书首次提到了软件开发中设计模式的概念
  四位作者合称 GOF
  他们所提出的设计模式主要是基于以下的面向对象设计原则
    对接口编程而不是对实现编程
    优先使用对象组合而不是继承

Q:什么是"对象组合"?
A: private Animal animal = new Animal(); ,而非 extends 继承而来

设计模式的类型
  可分为三大类
  1>创建型模式
    创建对象的同时隐藏创建逻辑
    1)工厂模式
    2)抽象工厂模式
    3)单例模式
    4)建造者模式
    5)原型模式
  2>结构型模式
    关注类和对象的组合,继承的概念被用来组合接口和定义组合对象获得新功能的方式
    1)适配器模式
    2)桥接模式过滤器模式
    3)组合模式
    4)装饰器模式
    5)外观模式
    6)外观模式
    7)享元模式
    8)代理模式
  3>行为型模式
    关注对象之间的通信
    1)责任链模式
    2)命令模式
    3)解释器模式
    4)迭代器模式
    5)中介者模式
    6)备忘录模式
    7)观察者模式
    8)状态模式
    9)空对象模式
    a)策略模式
    b)模板模式
    c)访问者模式
  4> J2EE 模式
    关注表示层,由 Sun Java Center 鉴定
    1) MVC 模式
    2)业务代表模式
    3)组合实体模式
    4)数据访问对象模式
    5)前端控制器模式
    6)拦截过滤器模式
    7)服务定位器模式
    8)传输对象模式

设计模式的六大原则
  1>开闭原则
    对扩展开放,对修改关闭
  2>里氏代换原则
    任何基类可以出现的地方,子类一定可以出现
    里氏代换原则是对开闭原则的补充
    实现开闭原则的关键步骤就是抽象化,而基类与子类的继承关系就是抽象化的具体实现
    即里氏代换原则是对实现抽象化的具体步骤的规范
  3>依赖倒转原则
    是开闭原则的基础
    针对接口编程,依赖于抽象而不依赖于具体
  4>接口隔离原则
    使用多个隔离的接口比使用单个接口要好
    降低类之间的耦合度
  5>迪米特法则(最少知道原则)
    一个实体应当尽量少地与其它实体之间发生相互作用,使得系统功能模块相对独立
  6>合成复用原则
    尽量使用合成/聚合的方式而不是继承

工厂模式
  创建型模式,它提供了一种创建对象的最佳方式
  1>意图
    定义一个创建对象的接口,让其子类自己决定实例化哪一个工厂类,工厂模式使其创建过程延迟到子类进行
  2>主要解决
    主要解决接口选择的问题
  3>如何使用
    明确地计划不同条件下创建不通实例时
  4>如何解决
    让其子类实现工厂接口,返回的也是一个抽象的产品
  5>关键代码
    创建过程在其子类执行
  6>应用实例
    1)你需要一辆汽车,可以直接从工厂里面提货,而不用去管这辆车是怎么做出来的以及这个汽车里面的具体实现
    2) Hibernate 换数据库只需要换方言和驱动即可
  7>优点
    1)一个调用者创建一个对象,只要知道其名称就可以了
    2)扩展性高,如果想增加一个产品,只要扩展一个工厂类就可以
    3)屏蔽产品的具体实现,调用者只关心产品的接口
  8>缺点
    每次增加一个产品时都需要增加一个具体类和对象实现工厂,使得系统中类的个数成倍增加
    在一定程度上增加了系统的复杂度,同时也增加了系统具体类的依赖
  9>使用场景
    1)日志记录器,记录可能记录到本地硬盘,系统事件,远程服务器等,用户可以选择记录日志到什么地方
    2)数据库访问,当用户不知道最后系统采用哪一类数据库以及数据库可能有变化时
    3)设计一个连接服务器的框架需要三个协议( POP3 IMAP HTTP ),可以把这三个作为产品类共同实现一个接口
  10>注意事项
    作为一种创建类模式,在任何需要生成复杂对象的地方都可以使用工厂模式
    但简单对象无需使用工厂模式,会增加系统的复杂度
  11>实现
    接口
      Shape.java
        public interface Shape {
          void draw();
        }
    实体类
      Rectangle.java
        public class Rectangle implements Shape {
          @Override
          public void draw() {
            sysout("Inside Rectangle::draw() method.");
          }
        }
      Square.java
        public class Square implements Shape {
          @Override
          public void draw() {
            sysout("Inside Square::draw() method.");
          }
        }
      Circle.java
        public class Circle implements Shape {
          @Override
          sysout("Inside Circle::draw() method.");
        }
    创建工厂,生成基于给定信息的实体类的对象
      ShapeFactory.java
        public class ShapeFactory {
          // 使用 getShape 方法获取形状类型的对象
          public Shape getShape(String shapeType) {
            if(shapeType==null) {
              return null;
            }
            if(shapeType.equalsIgnoreCase("CIRCLE")) {
              return new Circle();
            } else if(shapeType.equalsIgnoreCase("RECTANGLE")) {
              return new Rectangle();
            } else if(shapeType.equalsIgnoreCase("SQUARE")) {
              return new Square();
            }
            return null;
          } 
        }
    使用该工厂,通过传递类型信息获取实体类的对象
      FactoryPatternDemo {
        public static void main(String[] args) {
          ShapeFactory shapeFactory = new ShapeFactory();
          // 获取 Circle 的对象并调用它的 draw 方法
          Shape shape1 = shapeFactory.getShape("CIRCLE");
          // 调用 Circle 的 draw 方法
          shape1.draw();
          // 获取 Rectangle 的对象并调用它的 draw 方法
          Shape shape2 = shapeFactory.getShape("RECTANGLE");
          // 调用 RECTANGLE 的 draw 方法
          shape2.draw();
          // 获取 Square 的对象并调用它的 draw 方法
          Shape shape3 = shapeFactory.getShape("SQUARE");
          // 调用 Square 的 draw 方法
          shape3.draw();
        }
      }
  12>结果
    Inside Circle::draw() method.
    Inside Rectangle::draw() method.
    Inside Square::draw() method.

抽象工厂模式
  抽象工厂模式是围绕一个超级工厂创建其他工厂,该超级工厂又称为其它工厂的工厂
  这种类型的设计模式属于创建型模式,它提供了一种创建对象的最佳方式
  在抽象工厂模式中,接口是负责创建一个相关对象的工厂,不需要显示指定它们的类
  每个生成的工厂都能按照工厂模式提供对象
  1>意图
    提供一个创建一系列相关或相互依赖对象的接口,而无需指定它们具体的类
  2>主要解决
    接口选择的问题
  3>如何使用
    系统的产品有多于一个的产品族,而系统只消费其中某一族的产品
  4>如何解决
    在一个产品族里面定义多个产品
  5>关键代码
    在一个工厂里聚合多个同类产品
  6>应用实例
    略
  7>优点
    当一个产品族中的多个对象被设计成一起工作时,它能保证客户端始终只使用一个产品族中的对象
  8>缺点
    产品扩展非常困难,要增加一个系列的某一产品,既要在抽象的 Creator 里加代码,又要在具体的里面加代码
  9>使用场景
    生成不同操作系统的程序
  10>注意事项
    产品族难扩展,产品等级易扩展
  11>实现
    创建形状接口 
      > Shape.java
      public interface Shape {
        void draw();
      }
    创建实现接口的实体类
      > Rectangle.java
      public class Rectangle implements Shape {
        @Override
        public void draw() {
          sysout("Inside Rectangle::draw() method.");
        }
      }
      > Square.java
      public class Square implements Shape {
        @Override
        public void draw() {
          sysout("Inside Square::draw() method.");
        }
      }
      > Circle.java
      public class Circle implements Shape {
        @Override
        public void draw() {
          sysout("Inside Circle::draw() method.");
        }
      }
    为颜色创建一个接口
      > Color.java
      public interface Color {
        void fill();
      }
    实现接口
      > Red.java
      public class Red implements Color {
        @Override
        public void fill() {
          sysout("Inside Red::fill() method.");
        }
      }
      > Green.java
      public class Green implements Color {
        @Override
        public void fill() {
          sysout("Inside Green::fill() method.");
        }
      }
      > Blue.java
      public class Blue implements Color {
        @Override
        public void fill() {
          sysout("Inside Blue::fill() method.");
        }
      }
    为 Color 和 Shape 对象创建抽象类来获取工厂
    > AbstractFactory.java
    public abstract class AbstractFactory {
      public abstract Color getColor(String color);
      public abstract Shape getShape(String shape);
    }
    创建已扩展 AbstractFactory 的工厂类,基于给定的信息生成实体类的对象
    ShapeFactory.java
    public class ShapeFactory extends AbstractFactory {
      @Override
      public Shape getShape(String shapeType) {
        if(shapeType==null) {
          return null;
        }
        if(shapeType.equalsIgnoreCase("CIRCLE")) {
          return new Circle();
        }else if(shapeType.equalsIgnoreCase("RECTANGLE")) {
          return new Rectangle();
        }else if(shapeType.equalsIgnoreCase("SQUARE")) {
          return new Square();
        }
        return null;
      }
      @Override
      public Color getColor(String color) {
        return null;
      }
    }
    > ColorFactory.java
    public class ColorFactory extends AbstractFactory {
      @Override
      public Shape getShape(String shapeType) {
        return null;
      }
      @Override
      public Color getColor(String Color) {
        if(color==null) {
          return null;
        }
        if(color.equalsIgnoreCase("RED")) {
          return new Red();
        }else if(color.equalsIgnoreCase("GREEN")) {
          return new Green();
        }else if(color.equalsIgnoreCase("BLUE")) {
          return new Blue();
        }
        return null;
      }
    }
    创建一个工厂创造器/生成器类,通过传递形状或颜色信息来获取工厂
    > FactoryProducer.java
    public class FactoryProducer {
      public static AbstractFactory getFactory(String choice) {
        if(choice.equalsIgnoreCase("SHAPE")) {
          return new ShapeFactory();
        }else if(choice.equalsIgnoreCase("COLOR")) {
          return new ColorFactory();
        }
        return null;
      }
    }
    使用 FactoryProducer 来获取 AbstractFactory ,通过传递类型信息来获取实体类的对象
    > AbstractFactoryPatternDemo.java
    public class AbstractFactoryPatternDemo {
      public static void main(String[] args) {
        //获取形状工厂
        AbstractFactory shapeFactory = FactoryProducer.getFactory("SHAPE");
        
        Shape shape1 = shapeFactory.getShape("CIRCLE");  //获取形状为 Circle 的对象
        shape1.draw();//调用 Circle 的 draw 方法

        Shape shape2 = shapeFactory.getShape("RECTANGLE");  //获取形状为 Rectangle 的对象
        shape2.draw();

        Shape shape3 = shapeFactory.getShape("SQUARE");  //获取形状为 Square 的对象
        shape3.draw();

        AbstractFactory colorFactory = FactoryProducer.getFactory("COLOR");  //获取颜色工厂
        
        Color color1 = colorFactory.getColor("RED");  //获取颜色为 Red 的对象
        color1.fill();

        Color color2 = colorFactory.getColor("GREEN");  //获取颜色为 Green 的对象
        color2.fill();

        Color color3 = colorFactory.getColor("BLUE");  //获取颜色为 Blue 的对象
        color3.fill();
      }
    }
  12.结果
    Inside Circle::draw() method.
    Inside Rectangle::draw() method.
    Inside Square::draw() method.
    Inside Red::fill() method.
    Inside Green::fill() method.
    Inside Blue::fill() method.
  
单例模式
  一个单一的类,仅负责创建自己的对象,同时确保只有单个对象被创建
  这个类提供了一种访问其唯一的对象的方式,可以直接访问,不需要实例化该类的对象
  注意:
    1.单例类只能有一个实例
    2.单例类必须自己创建自己的唯一实例
    3.单例类必须给所有其它对象提供这一实例
  1>意图
    保证一个类只有一个实例,并提供一个访问它的全局访问点
  2>主要解决
    一个全局使用的类频繁地创建与销毁
  3>何时使用
    当你想控制实例数目,节省系统资源地时候
  4>如何解决
    判断系统是否已经有这个单例,如果有则返回,如果没有则创建
  5>关键代码
    构造函数是私有的
  6>应用实例
    1.一个班级只有一个班主任
    2. Windows 是多进程多线程的,在操作一个文件的时候,就不可避免地出现多个进程或线程同时操作一个文件的现象,所以所有文件的处理必须通过唯一的实例来进行
    3.一些设备管理器常常设计为单例模式,比如一个电脑有两台打印机,在输出的时候就要处理不能两台打印机打印同一个文件
  7>优点
    1.在内存里只有一个实例,减少了内存的开销,尤其是频繁的创建和销毁实例
    2.避免