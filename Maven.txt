下载与环境配置
  进入官网
  https://maven.apache.org/download.cgi
  点击下载并解压
  Binary zip archive > apache-maven-x.x.x-bin.zip
  新建一个系统变量
  MAVEN_HOME   [ maven 的 bin 所在目录位置]
  再在系统变量中的 path 变量中添加 %MAVEN_HOME%\bin
  cmd > mvn -version 显示版本即成功

Maven
  Maven 是一个项目管理工具,可以对 Java 项目进行构建和依赖管理
  约定配置
    Maven 提倡使用一个共同的准目录结构
    Maven 使用约定由于配置的原则
    --目录---------------------------------目的--
      ${basedir}                           存放 pom.xml 和所有的子目录
      ${basedir}/src/main/java             项目的 java 源代码
      ${basedir}/src/main/resources        项目的资源,比如 property 文件, springmvc.xml
      ${basedir}/src/test/java             项目的测试类,比如 Junit 代码
      ${basedir}/src/test/resources        测试用的资源
      ${basedir}/src/main/webapp/WEB-INF   web 应用文件目录, web 项目的信息,比如存放 web.xml,本地图片, jsp 视图页面 
      ${basedir}/src/target                打包输出目录
      ${basedir}/src/target/classes        编译输出目录
      ${basedir}/src/target/test-classes   测试编译使出目录
      Test.java                            Maven 只会自动运行符合该命名规则的测试类
      ~/.m2/repository                     Maven 默认的本地仓库目录位置
  Maven 特点
    项目设置遵循统一规则
    任意工程中共享
    依赖管理包括自动更新
    一个庞大且不断增长的库
    可扩展,能够轻松编写 java 或脚本语言的插件
    只需很少或不需要额外配置即可及时访问新功能
    基于模型的构建
      Maven 能够将任意数量的项目构建到预定义的输出类型中,如 jar war 或基于项目元数据的分发,而不需要在大多数情况下执行任何脚本
    项目信息的一致性站点
      使用与构建过程相同的元数据, Maven 能够生成一个网站或 pdf ,包括你要添加的任何文档,并添加到关于项目开发状态的标准报告中
    发布管理和发布单独的输出
      Maven 将不需要额外的配置就可以与源代码管理系统(如 subverion 或 git )集成
      并可以基于某个标签管理项目的发布,它也可以将其发布到分发位置供其他项目使用
      Maven 能够发布单独的输出,如 jar ,包含其它依赖和文档的归档,或者作为源代码发布
    向后兼容性
      你可以很轻松的从旧版本 Maven 的多个模块移植到新版本中
    子项目使用父项目依赖时,正常情况子项目应该继承父项目依赖,无需使用版本号
    并行构建
      编译速度普遍提高20%~50%
    更好的错误报告
      Maven 改进了错误报告,并提供了 Maven wiki 页面的链接,通过此链接查看错误的完整描述

POM
  POM(Project Object Model ,项目对象模型)是 Maven 工程的基本工作单元,是一个 XML 文件
  包含项目的基本信息,用于描述先您过目如何构建,声明项目依赖等等
  执行任务或目标时, Maven 会在当前目录中查找 POM ,读取 POM 获取所需的配置信息并执行目标
  POM 中可以指定以下配置:
    1.项目依赖
    2.插件
    3.执行目标
    4.项目构建 profile
    5.项目版本
    6.项目开发者列表
    7.相关邮件列表信息
  在创建 POM 之前,我们需要描述项目组(groupId),项目的唯一ID
    <!-- 工程的根标签 -->
    <project xmlns = "http://maven.apache.org/POM/4.0.0"
      xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
      http://maven.apache.org/xsd/maven-4.0.0.xsd">
      
      <!-- 模型版本 -->
      <modelVersion>4.0.0</modeVersion>
      <!-- 工程组的标识,公司或组织的唯一标志,并且配置时生成的路径也是由此生成的
        如 com.companyname.project-group, maven 会将该项目打包成的 jar 包放入本地路径: /com/companyname/project-group -->
      <groupId>com.companyname.project-group</groupId>

      <!-- 工程版本号,项目的唯一 ID ,一个 groupId 下面可能有多个项目,用来区分不同的版本 -->
      <artifactId>project</artifactId>

      <!-- 版本号 -->
      <version>1.0</version>
    </project>
  所有 POM 文件都需要 project 元素和三个必须字段: groupId artifactId version
  父(Super)POM
    它是 Maven 默认的 POM
    所有的 POM 都继承自一个父 POM(无论是否有显式定义)
    父 POM 包含了一些可以被继承的默认设置
    因此当 Maven 发现需要下载 POM 中的依赖时,它会到 Super POM 中配置的默认仓库
      http://repo1.maven.org/maven2
    去下载
     Maven 使用 effective POM(Super POM 加上工程自己的配置)来执行相关的目标
    它帮助开发者在 pom.xml 中做尽可能少的配置,当然这些配置可以被重写
    使用以下命令查看 Super POM 默认配置
      mvn help:effective-pom 
    创建流程
      创建目录 MVN/project
      创建 pom.xml ,内容如下
        <project xmlns="http://maven.apache.org/POM/4.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xis:schemaLocation="http://maven.apache.org/POM/4.0.0
          http://maven.apache.org/xsd/maven-4.0.0.xsd">

          <!--模型版本-->
          <modelVersion>4.0.0</modelVersion>
          <!--标识-->
          <groupId>com.companyname.project.group</groupId>
          <!-- 项目唯一ID -->
          <artifactId>project</artifactId>
          <!-- 版本号 -->
          <version>1.0</version>

        </project>
      控制台进入 MVN/project 目录,执行下述命令
        mvn help:effective-pom
       Maven 将会开始处理并显示 effective-pom
      
      创建

IDEA 配置 maven
