计算机主要的五个部分
    控制器,运算器,存储器,输入设备,输出设备
    
程序
    一组计算机能识别和执行的指令

并发
    指在同一时刻只能有一条指令执行,但多个进程指令被快速的轮换执行,使得在宏观上具有多个进程同时执行的效果
    但在微观上并不是同时执行的,只是把时间分成若干段,使多个进程快速交替的执行
    并发在单处理器和多处理器中都有存在

并行
    指在同一时刻,有多条指令在多个处理器上同时执行,无论从微观还是宏观来看,二者是一起执行的
    并行在多处理器系统中存在

进程
    进程是一个抽象概念,从未统一其标准定义
    进程一般由程序,数据集合和进程控制块三部分组成
    进程是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程,是操作系统进行资源分配和调度的一个独立单位,是应用程序运行的载体
    每个进程都有各自独立的内存块

线程
    线程是程序执行中一个单一的顺序控制流程,是程序执行流的最小单元,是处理器调度和分派的基本单位
    一个进程可以有一个或多个线程,线程之间共享程序的内存空间
    一个标准的线程由线程ID,当前指令指针PC,寄存器和堆栈组成

多进程与多线程
    1.在python3中,若想充分利用多核CPU,就用多进程,每个进程有各自独立的GIL(全局解释器锁),互不干扰
    2.在正常情况下,多进程的上下文不仅包括虚拟内存、栈、全局变量等用户空间的资源,还包括了内核堆栈、寄存器等内核空间的状态
      多线程属于同一个进程,内存是共享的,切换线程时只需切换线程的私有数据、寄存器等不共享的数据,消耗比切换进程更少的资源

栈
    栈由操作系统自动分配释放,用于存放函数的参数值、局部变量等,其操作方式类似于数据结构中的栈
    其中函数中定义的局部变量按照先后定义的顺序依次压入栈中,也就是说相邻变量的地址之间不会存在其他变量
    栈的内存地址生长方向与堆相反,由高到低,所以后定义的变量地址低于先定义的变量
    栈中存储的数据的生命周期随着函数的执行完成而结束
    
堆
    堆由开发人员分配和释放,若开发人员不释放,程序结束时由OS回收,分配方式类似于链表
    
堆与栈的区别
    堆与栈实际上是操作系统对进程占用的内存空间的两种管理方式
    1.管理方式不同
        栈由操作系统自动分配释放,无需我们手动控制,堆的申请和释放由程序员控制,容易产生内存泄漏
    2.空间大小不同
        每个进程拥有的栈的大小要远远小于堆的大小,理论上程序员ke'yi
    
